--
-- check_postgis_installed
--
\c trjregression
SET client_min_messages TO warning;
-----------------------------------------
--  add a new trajectory            -----
-----------------------------------------
-- add TAXI
SELECT trajectory.CreateTrajectory('taxi', 'T001',  4326, 0.00001);
 createtrajectory 
------------------
                1
(1 row)

SELECT trajectory.CreateTrajectory('taxi', 'T002',  4326, 0.00001);
 createtrajectory 
------------------
                2
(1 row)

SELECT trajectory.CreateTrajectory('taxi', 'T003',  4326, 0.00001);
 createtrajectory 
------------------
                3
(1 row)

-- add BUS
SELECT trajectory.CreateTrajectory('bus', 'B001',  4326, 0.00001);
 createtrajectory 
------------------
                4
(1 row)

SELECT trajectory.CreateTrajectory('bus', 'B002',  4326, 0.00001);
 createtrajectory 
------------------
                5
(1 row)

SELECT trajectory.CreateTrajectory('bus', 'B003',  4326, 0.00001);
 createtrajectory 
------------------
                6
(1 row)

-- add trajectories with conflict name but different pool
SELECT trajectory.CreateTrajectory('bus', 'T001',  4326, 0.00001);
 createtrajectory 
------------------
                7
(1 row)

SELECT trajectory.CreateTrajectory('taxi', 'B001',  4326, 0.00001);
 createtrajectory 
------------------
                8
(1 row)

-- ERROR: add trajectories with conflict <pool, name>, not unique
SELECT trajectory.CreateTrajectory('taxi', 'T001',  4326, 0.00001);
ERROR:  trajectory.CreateTrajectory() - Trajectory taxi (T001) exists!
SELECT trajectory.CreateTrajectory('bus', 'B001',  4326, 0.00001);
ERROR:  trajectory.CreateTrajectory() - Trajectory bus (B001) exists!
-- query them
SELECT id, poolname, trjname from trajectory.trajectory ORDER BY id;
 id | poolname | trjname 
----+----------+---------
  1 | taxi     | T001
  2 | taxi     | T002
  3 | taxi     | T003
  4 | bus      | B001
  5 | bus      | B002
  6 | bus      | B003
  7 | bus      | T001
  8 | taxi     | B001
(8 rows)

-----------------------------------------
--  delete a new trajectory         -----
-----------------------------------------
-- remove one TAXI trajectory
SELECT trajectory.DeleteTrajectory('taxi', 'T002');
                       deletetrajectory                        
---------------------------------------------------------------
 Trajectory taxi (T002) (with id = 2) is removed successfully.
(1 row)

SELECT id, poolname, trjname from trajectory.trajectory where poolname = 'taxi' ORDER BY id;
 id | poolname | trjname 
----+----------+---------
  1 | taxi     | T001
  3 | taxi     | T003
  8 | taxi     | B001
(3 rows)

-- remove one BUS trajectory
SELECT trajectory.DeleteTrajectory('bus', 'B002');
                       deletetrajectory                       
--------------------------------------------------------------
 Trajectory bus (B002) (with id = 5) is removed successfully.
(1 row)

SELECT id, poolname, trjname from trajectory.trajectory where poolname = 'bus' ORDER BY id;
 id | poolname | trjname 
----+----------+---------
  4 | bus      | B001
  6 | bus      | B003
  7 | bus      | T001
(3 rows)

-- remove one trajectory NOT exists
SELECT trajectory.DeleteTrajectory('taxi', 'T002');
ERROR:  trajectory.DeleteTrajectory() - taxi (T002) not found
SELECT trajectory.DeleteTrajectory('bus', 'B002');
ERROR:  trajectory.DeleteTrajectory() - bus (B002) not found
SELECT trajectory.DeleteTrajectory('metro', 'M001');
ERROR:  trajectory.DeleteTrajectory() - metro (M001) not found
-- query them
SELECT id, poolname, trjname from trajectory.trajectory ORDER BY id;
 id | poolname | trjname 
----+----------+---------
  1 | taxi     | T001
  3 | taxi     | T003
  4 | bus      | B001
  6 | bus      | B003
  7 | bus      | T001
  8 | taxi     | B001
(6 rows)

